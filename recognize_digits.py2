from flask import Flask, render_template
from apscheduler.schedulers.background import BackgroundScheduler
import cv2, imutils, os, uuid
import numpy as np

app = Flask(__name__)
PORT = 5000


def get_window():
    # x1, x2, y1, y2
    return [310, 365, 200, 250]


def get_image_from_filename_night(file, window):
    img = cv2.imread(file)[window[2]:window[3], window[0]:window[1]]
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    # darker
    # lower_orange = np.array([0, 0, 50])
    # upper_orange = np.array([35, 100, 255])
    #
    # very dark
    lower_orange = np.array([0, 0, 50])
    upper_orange = np.array([180, 100, 250])
    mask = cv2.inRange(hsv, lower_orange, upper_orange)
    mask = np.invert(mask)
    return mask


def get_image_from_filename_day(file, window):
    img = cv2.imread(file)[window[2]:window[3], window[0]:window[1]]
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    lower_orange = np.array([0, 50, 50])
    upper_orange = np.array([35, 250, 255])
    mask = cv2.inRange(hsv, lower_orange, upper_orange)
    return mask


def get_bank():
    result = dict()
    for i in range(26):
        result[str(i)] = get_image_from_filename_day(f"/bank/{i}.jpg", get_window())
    return result


def get_score(img1, img2):
    err = np.sum((img1.astype("float") - img2.astype("float")) ** 2)
    err /= float(img1.shape[0] * img1.shape[1])
    return err


def benchmark(img):
    result = dict()
    for i in range(26):
        bank_image = get_bank()[str(i)]
        comparison = get_score(bank_image, img)
        result[i] = comparison
    return result


def get_time(filename):
    current = get_image_from_filename_day(filename, get_window())
    scores = benchmark(current)
    # print(scores)
    # print(sorted(scores, key=scores.__getitem__))
    return min(scores, key=scores.get)


def get_time_italy():
    f = open('/data/italy', 'r')
    timer = f.read()
    f.close()
    return int(timer)


def compute_time_france_from_italy(italy_time):
    if 26 >= italy_time >= 15:
        return italy_time - 14
    elif 14 >= italy_time >= 11:
        return 0
    elif italy_time <= 10:
        return 25 - (10 - italy_time)


def write_time_italy(t):
    f = open("/data/italy", "w")
    f.write(str(t))
    f.close()


@app.route("/")
def home():
    return "timer"


@app.route("/italy")
def italy():
    return str(get_time_italy())


@app.route("/france")
def france():
    return str(compute_time_france_from_italy(get_time_italy()))


@app.route("/stats")
def stats():
    results = {}
    for i in range(26):
        print(f"computing test set for : {i}")
        computations = []
        for f in os.listdir(f"/tests/{i}/"):
            t = get_time(f"/tests/{i}/{f}")
            computations.append(t)
        success = len([c for c in computations if c == i])
        errors = len([c for c in computations if c != i])
        results[i] = {
            'total': len(computations),
            'success': success,
            'errors': errors,
            'ratio': float(success) / len(computations) * 100 if len(computations) > 0 else 'None'
        }
    return render_template('stats.html',
                           results=results)


def download_image_camera(file, url):
    return os.system(
        f'wget --no-check-certificate --no-cache --no-cookies {url} --post-data="action=purge" --output-document={file}')


def compute_time():
    code = download_image_camera("/data/current.jpg", "http://94.125.235.194:8080/record/current.jpg")
    if code == 0:
        t = get_time("/data/current.jpg")
        write_time_italy(t)


def organize():
    for f in os.listdir("/tests/download"):
        t = get_time(f"/tests/download/{f}")
        os.system(f"mv /tests/download/{f} /tests/{t}/")


def get_camera_image():
    download_image_camera(f"/tests/{uuid.uuid1()}.jpg", "http://94.125.235.194:8080/record/current.jpg")


if __name__ == '__main__':
    # scheduler = BackgroundScheduler()
    # scheduler.add_job(func=compute_time, trigger="interval", seconds=15)
    # scheduler.start()

    # scheduler = BackgroundScheduler()
    # scheduler.add_job(func=get_camera_image, trigger="interval", seconds=30)
    # scheduler.start()

    # port = int(os.environ.get('PORT', PORT))
    # app.run(host='0.0.0.0', port=port)
    print(str(get_time("/data/current.jpg")))
